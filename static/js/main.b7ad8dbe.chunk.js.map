{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","types/FilterType.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedTodo","onSelectedTodo","className","map","todo","id","title","completed","isSelected","cn","type","onClick","TodoFilter","onFilter","query","onQuery","onApplyQuery","onChange","event","target","value","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterType","Loader","TodoModal","onTodo","useState","user","setUser","isLoading","setIsLoading","isError","hasIsError","isLoaded","setIsLoaded","useEffect","userId","userFromServer","catch","error","console","warn","finally","href","email","name","App","setTodos","setSelectedTodo","All","filterType","setFilterType","setQuery","appliedQuery","setAppliedQuery","todosFromServer","applyQuery","useCallback","f","timerId","clearTimeout","args","debounce","filteredTodos","useMemo","preparedTodos","lowerQuery","toLowerCase","filter","includes","Active","Completed","Error","getFilteredTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b7ad8dbe.chunk.js","sourcesContent":["import cn from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  onSelectedTodo: (todo: Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  onSelectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const { id, title, completed } = todo;\n        const isSelected = selectedTodo?.id === id;\n\n        return (\n          <tr\n            data-cy=\"todo\"\n            key={id}\n            className={cn({\n              'has-background-info-light': isSelected,\n            })}\n          >\n            <td className=\"is-vcentered\">\n              {id}\n            </td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={cn({\n                  'has-text-success': completed,\n                  'has-text-danger': !completed,\n                })}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  onSelectedTodo(todo);\n                }}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={cn('far', {\n                      'fa-eye-slash': isSelected,\n                      'fa-eye': !isSelected,\n                    })}\n                  />\n\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { FilterType } from '../../types/FilterType';\n\ntype Props = {\n  onFilter: (type: FilterType) => void;\n  query: string;\n  onQuery: (event: string) => void;\n  onApplyQuery: (event: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  onFilter,\n  query,\n  onQuery,\n  onApplyQuery,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          onChange={(event) => {\n            onFilter(event.target.value as FilterType);\n          }}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => {\n          onQuery(event.target.value);\n          onApplyQuery(event.target.value);\n        }}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {query && (\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => {\n              onQuery('');\n            }}\n            aria-label=\"close modal\"\n          />\n        )}\n      </span>\n    </p>\n  </form>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo;\n  onTodo: (todo: Todo | null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onTodo }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, hasIsError] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    getUser(todo.userId)\n      .then(userFromServer => {\n        setUser(userFromServer);\n        setIsLoaded(true);\n      })\n      .catch(error => {\n        // eslint-disable-next-line no-console\n        console.warn('Error', error);\n        hasIsError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const { id, title, completed } = todo;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {isLoading && <Loader />}\n      {isLoaded && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                onTodo(null);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? (<strong className=\"has-text-success\">Done</strong>)\n                : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n      {isError && (\n        <div className=\"notification is-danger has-text-centered\">\n          <strong>An error occurred when loading user</strong>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { Loader } from './components/Loader';\nimport { FilterType } from './types/FilterType';\n\nconst getFilteredTodos = (todos: Todo[], type: string, query: string) => {\n  let preparedTodos = [...todos];\n\n  if (query) {\n    const lowerQuery = query.toLowerCase();\n\n    preparedTodos = preparedTodos.filter(todo => todo.title.toLowerCase().includes(lowerQuery));\n  }\n\n  preparedTodos = preparedTodos.filter(todo => {\n    switch (type) {\n      case FilterType.All:\n        return true;\n      case FilterType.Active:\n        return !todo.completed;\n      case FilterType.Completed:\n        return todo.completed;\n      default:\n        throw new Error('Filter type is incorrect');\n    }\n  });\n\n  return preparedTodos;\n};\n\nconst debounce = (f: React.Dispatch<React.SetStateAction<string>>, delay: number) => {\n  let timerId: number;\n\n  return (...args: string[]) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(f, delay, ...args);\n  };\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [filterType, setFilterType] = useState<FilterType>(FilterType.All);\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isError, hasIsError] = useState(false);\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n        setIsLoaded(true);\n      })\n      .catch(error => {\n        // eslint-disable-next-line no-console\n        console.warn('Error', error);\n        hasIsError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const applyQuery = useCallback(debounce(setAppliedQuery, 1000), []);\n\n  const filteredTodos = useMemo(() => getFilteredTodos(todos, filterType, appliedQuery),\n    [todos, filterType, appliedQuery]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onFilter={setFilterType}\n                query={query}\n                onQuery={setQuery}\n                onApplyQuery={applyQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n              {isLoaded && (\n                <TodoList\n                  todos={filteredTodos}\n                  selectedTodo={selectedTodo}\n                  onSelectedTodo={setSelectedTodo}\n                />\n              )}\n              {isError && (\n                <div className=\"notification is-danger has-text-centered\">\n                  <strong>An error occurred when loading todos</strong>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onTodo={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}